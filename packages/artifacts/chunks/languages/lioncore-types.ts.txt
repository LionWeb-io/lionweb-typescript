// Warning: this file is generated!
// Modifying it by hand it useless at best, and sabotage at worst.

/*
 * language's metadata:
 *     name:    LionCore.M3
 *     version: 2023.1
 */

import {DynamicNode, DynamicINamed as INamed} from "@lionweb/core";

export type Annotation = Classifier & {
    // classifier -> Annotation
    settings: {
        multiple?: boolean;
        annotates?: Classifier;
        extends?: Annotation;
        implements: Interface[];
    };
};

/** abstract */ export type Classifier = LanguageEntity & {
    settings: {
        features: Feature[];
    };
};

export type Concept = Classifier & {
    // classifier -> Concept
    settings: {
        abstract: boolean;
        partition: boolean;
        extends?: Concept;
        implements: Interface[];
    };
};

export type Containment = Link & {
    // classifier -> Containment
};

/** abstract */ export type DataType = LanguageEntity;

export type Enumeration = DataType & {
    // classifier -> Enumeration
    settings: {
        literals: EnumerationLiteral[];
    };
};

export type EnumerationLiteral = IKeyed & {
    // classifier -> EnumerationLiteral
};

/** abstract */ export type Feature = IKeyed & {
    settings: {
        optional: boolean;
    };
};

/** interface */ export type IKeyed = INamed & {
    settings: {
        key: string;
    };
};

export type Interface = Classifier & {
    // classifier -> Interface
    settings: {
        extends: Interface[];
    };
};

export type Language = IKeyed & {
    // classifier -> Language
    settings: {
        version: string;
        entities: LanguageEntity[];
        dependsOn: Language[];
    };
};

/** abstract */ export type LanguageEntity = IKeyed;

/** abstract */ export type Link = Feature & {
    settings: {
        multiple: boolean;
        type: Classifier;
    };
};

export type PrimitiveType = DataType & {
    // classifier -> PrimitiveType
};

export type Property = Feature & {
    // classifier -> Property
    settings: {
        type: DataType;
    };
};

export type Reference = Link & {
    // classifier -> Reference
};

export type LionCore.M3Node = Annotation | Concept | Containment | Enumeration | EnumerationLiteral | Interface | Language | PrimitiveType | Property | Reference;
