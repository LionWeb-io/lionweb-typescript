// Generated by C# language instantiator generator!
// Don't modify, but you can delete and regenerate any time!

namespace LionWeb.Core.M3;

using LionWeb.Core.M2;
using LionWeb.Core.M3;

public static class LionCore
{
    public static readonly Language Instance = new(
        "-id-LionCore-M3",
        "LionCore-M3",
        "LionCore_M3",
        "2023.1"
    );

    static LionCore()
    {
        var Annotation = Instance.Concept("-id-Annotation", "Annotation", "Annotation");
        var Classifier = Instance.Concept("-id-Classifier", "Classifier", "Classifier");
        var Concept = Instance.Concept("-id-Concept", "Concept", "Concept");
        var Containment = Instance.Concept("-id-Containment", "Containment", "Containment");
        var DataType = Instance.Concept("-id-DataType", "DataType", "DataType");
        var Enumeration = Instance.Concept("-id-Enumeration", "Enumeration", "Enumeration");
        var EnumerationLiteral = Instance.Concept("-id-EnumerationLiteral", "EnumerationLiteral", "EnumerationLiteral");
        var Feature = Instance.Concept("-id-Feature", "Feature", "Feature");
        var IKeyed = Instance.Interface("-id-IKeyed", "IKeyed", "IKeyed");
        var Interface = Instance.Concept("-id-Interface", "Interface", "Interface");
        var Language = Instance.Concept("-id-Language", "Language", "Language");
        var LanguageEntity = Instance.Concept("-id-LanguageEntity", "LanguageEntity", "LanguageEntity");
        var Link = Instance.Concept("-id-Link", "Link", "Link");
        var PrimitiveType = Instance.Concept("-id-PrimitiveType", "PrimitiveType", "PrimitiveType");
        var Property = Instance.Concept("-id-Property", "Property", "Property");
        var Reference = Instance.Concept("-id-Reference", "Reference", "Reference");

        Annotation.Extending(Classifier);
        Annotation.Reference("-id-Annotation-annotates", "Annotation-annotates", "annotates").OfType(Classifier).IsOptional();
        Annotation.Reference("-id-Annotation-extends", "Annotation-extends", "extends").OfType(Annotation).IsOptional();
        Annotation.Reference("-id-Annotation-implements", "Annotation-implements", "implements").OfType(Interface).IsMultiple().IsOptional();

        Classifier.IsAbstract().Extending(LanguageEntity);
        Classifier.Containment("-id-Classifier-features", "Classifier-features", "features").OfType(Feature).IsMultiple().IsOptional();

        Concept.Extending(Classifier);
        Concept.Property("-id-Concept-abstract", "Concept-abstract", "abstract").OfType(BuiltIns.Boolean);
        Concept.Property("-id-Concept-partition", "Concept-partition", "partition").OfType(BuiltIns.Boolean);
        Concept.Reference("-id-Concept-extends", "Concept-extends", "extends").OfType(Concept).IsOptional();
        Concept.Reference("-id-Concept-implements", "Concept-implements", "implements").OfType(Interface).IsMultiple().IsOptional();

        Containment.Extending(Link);

        DataType.IsAbstract().Extending(LanguageEntity);

        Enumeration.Extending(DataType);
        Enumeration.Containment("-id-Enumeration-literals", "Enumeration-literals", "literals").OfType(EnumerationLiteral).IsMultiple().IsOptional();

        EnumerationLiteral.Implementing(IKeyed);

        Feature.IsAbstract().Implementing(IKeyed);
        Feature.Property("-id-Feature-optional", "Feature-optional", "optional").OfType(BuiltIns.Boolean);

        IKeyed.Extending(BuiltIns.INamed);
        IKeyed.Property("-id-IKeyed-key", "IKeyed-key", "key").OfType(BuiltIns.String);

        Interface.Extending(Classifier);
        Interface.Reference("-id-Interface-extends", "Interface-extends", "extends").OfType(Interface).IsMultiple().IsOptional();

        Language.IsPartition().Implementing(IKeyed);
        Language.Property("-id-Language-version", "Language-version", "version").OfType(BuiltIns.String);
        Language.Containment("-id-Language-entities", "Language-entities", "entities").OfType(LanguageEntity).IsMultiple().IsOptional();
        Language.Reference("-id-Language-dependsOn", "Language-dependsOn", "dependsOn").OfType(Language).IsMultiple().IsOptional();

        LanguageEntity.IsAbstract().Implementing(IKeyed);

        Link.IsAbstract().Extending(Feature);
        Link.Property("-id-Link-multiple", "Link-multiple", "multiple").OfType(BuiltIns.Boolean);
        Link.Reference("-id-Link-type", "Link-type", "type").OfType(Classifier);

        PrimitiveType.Extending(DataType);

        Property.Extending(Feature);
        Property.Reference("-id-Property-type", "Property-type", "type").OfType(DataType);

        Reference.Extending(Link);
    }
}
